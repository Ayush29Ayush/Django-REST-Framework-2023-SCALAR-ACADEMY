VIDEO LINK => https://www.youtube.com/watch?v=s7aINQPGNDM&ab_channel=SCALER

1. Create a venv and activate it
2. Create a project name "core" using "django-admin startproject core"
3. cd ./core
4. Create a app named "home" uusing "python manage.py startapp home"
5. Add your newly added apps and packages in INSTALLED_APPS in settings.py of project_folder
6. Here we are using api_view decorators to set METHODS
7. Create a api folder to set all API endpoints
8. I have integrated SWAGGER in this project

Ques) Why do we need serializer?
Ans) Because when we do Model_name.objects.all(), it will give [1,2,3,4] which is a queryset. We cannot expose our queryset to the frontend. It should be in a JSON format, to do that we use SERIALIZER. 
So basically you pass data to the SERIALIZER and it converts them into JSON format.
It also helps set up required fields.
9. PUT is for complete updation and PATCH is for partial updation.
10. Most commonly used serializer is ModelSerializer

Ques) Validation of data using serializer?
Ans) To maintain consistensy of data and validate whether the data coming follows the rules.

Ques) What is the difference btw depth and serializer?
Ans) serializer gives more control to you, giving us option of selecting which fields we want to show, but in depth, it serializes all the data of the different model.

Ques) How can you serialize a f.k data?
Ans) Using depth or creating a serializer of that f.k model.

11. If you want to make CUSTOM serializers using your own custom login, use serializers.Serializer

12. @api_view is a decorator to be used with functions and class based APIView are used for better flexibility and benifits of class like encapsulation.
13. ModelViewSet, import viewset in views.py and router in urls.py. Now all the crud functionality implemented by drf just by typing 2 lines.
14. The actions provided by the ModelViewSet class are .list(), .retrieve(), .create(), .update(), .partial_update(), and .destroy().

15. Token and permissions are also covered here.

16. We can also use "actions" decorators from ModelViewSet to apply custom actions.
